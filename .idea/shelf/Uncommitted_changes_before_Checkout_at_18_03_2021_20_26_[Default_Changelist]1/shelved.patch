Index: src/supercrafter333/theSpawn/theSpawn.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace supercrafter333\\theSpawn;\r\n\r\nuse pocketmine\\event\\Listener;\r\nuse pocketmine\\event\\player\\PlayerRespawnEvent;\r\nuse pocketmine\\level\\Level;\r\nuse pocketmine\\level\\Position;\r\nuse pocketmine\\level\\sound\\PopSound;\r\nuse pocketmine\\network\\mcpe\\protocol\\ScriptCustomEventPacket;\r\nuse pocketmine\\Player;\r\nuse pocketmine\\plugin\\PluginBase;\r\nuse pocketmine\\utils\\Binary;\r\nuse pocketmine\\utils\\Config;\r\nuse supercrafter333\\theSpawn\\Commands\\DelhomeCommand;\r\nuse supercrafter333\\theSpawn\\Commands\\DelhubCommand;\r\nuse supercrafter333\\theSpawn\\Commands\\DelspawnCommand;\r\nuse supercrafter333\\theSpawn\\Commands\\HomeCommand;\r\nuse supercrafter333\\theSpawn\\Commands\\HubCommand;\r\nuse supercrafter333\\theSpawn\\Commands\\RemovealiasCommand;\r\nuse supercrafter333\\theSpawn\\Commands\\SetaliasCommand;\r\nuse supercrafter333\\theSpawn\\Commands\\SethomeCommand;\r\nuse supercrafter333\\theSpawn\\Commands\\SethubCommand;\r\nuse supercrafter333\\theSpawn\\Commands\\SetspawnCommand;\r\nuse supercrafter333\\theSpawn\\Commands\\SpawnCommand;\r\nuse supercrafter333\\theSpawn\\Others\\HomeInfo;\r\n\r\n/**\r\n * Class theSpawn\r\n * @package supercrafter333\\theSpawn\r\n */\r\nclass theSpawn extends PluginBase implements Listener\r\n{\r\n\r\n    /**\r\n     * @var\r\n     */\r\n    public static $instance;\r\n\r\n    /**\r\n     *\r\n     */\r\n    public const PREFIX = \"§f[§7the§eSpawn§f] §8»§r \";\r\n    /**\r\n     * @var\r\n     */\r\n    public $config;\r\n    /**\r\n     * @var\r\n     */\r\n    public $msgCfg;\r\n    /**\r\n     * @var\r\n     */\r\n    public $aliasCfg;\r\n\r\n    /**\r\n     * @var string\r\n     */\r\n    public $version = \"1.1.0\";\r\n\r\n    /**\r\n     *\r\n     */\r\n    public function onEnable()\r\n    {\r\n        self::$instance = $this;\r\n        $this->getServer()->getPluginManager()->registerEvents($this, $this);\r\n        $cmdMap = $this->getServer()->getCommandMap();\r\n        $this->saveResource(\"messages.yml\");\r\n        $this->saveResource(\"config.yml\");\r\n        if ($this->checkCfgVersion($this->version) == false) {\r\n            $this->updateCfg();\r\n            $this->getLogger()->warning(\"The config.yml data was updated automatically for version \" . $this->version . \" of theSpawn!\");\r\n        }\r\n        if (MsgMgr::checkMsgCfgVersion($this->version) == false) {\r\n            MsgMgr::updateMsgCfg();\r\n            $this->getLogger()->warning(\"The messages.yml data was updated automatically for version \" . $this->version . \" of theSpawn!\");\r\n        }\r\n        $this->config = new Config($this->getDataFolder() . \"config.yml\", Config::YAML);\r\n        $this->msgCfg = new Config($this->getDataFolder() . \"messages.yml\", Config::YAML);\r\n        @mkdir($this->getDataFolder() . \"homes\");\r\n        $this->aliasCfg = new Config($this->getDataFolder() . \"aliaslist.yml\", Config::YAML);\r\n        $aliasCfg = new Config($this->getDataFolder() . \"aliaslist.yml\", Config::YAML);\r\n        $cmdMap->registerAll(\"theSpawn\",\r\n        [\r\n            new SpawnCommand(\"spawn\"),\r\n            new SetspawnCommand(\"setspawn\"),\r\n            new DelspawnCommand(\"delspawn\"),\r\n            new HubCommand(\"hub\"),\r\n            new SethubCommand(\"sethub\"),\r\n            new DelhubCommand(\"delhub\")\r\n        ]);\r\n        if ($this->useAliases() == true) {\r\n            $cmdMap->registerAll(\"theSpawn\",\r\n            [\r\n                new SetaliasCommand(\"setalias\"),\r\n                new RemovealiasCommand(\"removealias\")\r\n            ]);\r\n            $this->reactivateAliases();\r\n        }\r\n        if ($this->useHomes() == true) {\r\n            $cmdMap->registerAll(\"theSpawn\",\r\n            [\r\n                new SethomeCommand(\"sethome\"),\r\n                new DelhomeCommand(\"delhome\"),\r\n                new HomeCommand(\"home\")\r\n            ]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @return static\r\n     */\r\n    public static function getInstance(): self\r\n    {\r\n        return self::$instance;\r\n    }\r\n\r\n    /**\r\n     * @return mixed\r\n     */\r\n    public function getCfg()\r\n    {\r\n        return new Config($this->getDataFolder() . \"config.yml\", Config::YAML);\r\n    }\r\n\r\n    /**\r\n     * @return mixed\r\n     */\r\n    public function getMsgCfg()\r\n    {\r\n        return MsgMgr::getMsgs();\r\n    }\r\n\r\n    /**\r\n     * @param string $version\r\n     * @return bool\r\n     */\r\n    public function checkCfgVersion(string $version): bool\r\n    {\r\n        if ($this->getCfg()->exists(\"version\")) {\r\n            if ($this->getCfg()->get(\"version\") == $version) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    public function updateCfg()\r\n    {\r\n        unlink($this->getDataFolder() . \"config.yml\");\r\n        $this->saveResource(\"config.yml\");\r\n    }\r\n\r\n    /**\r\n     * @param PlayerRespawnEvent $event\r\n     */\r\n    public function onPlayerRespawn(PlayerRespawnEvent $event)\r\n    {\r\n        $prefix = \"§f[§7the§eSpawn§f] §8»§r \";\r\n        $s = $event->getPlayer();\r\n        $spawn = new Config($this->getDataFolder() . \"theSpawns.yml\", Config::YAML);\r\n        $levelname = $s->getLevel()->getName();\r\n        $level = $this->getServer()->getLevelByName($levelname);\r\n        if ($spawn->exists($levelname)) {\r\n            $event->setRespawnPosition($this->getSpawn($level));\r\n            $s->getLevel()->addSound(new PopSound($s));\r\n        } else {\r\n            $event->setRespawnPosition($level->getSafeSpawn());\r\n            $s->getLevel()->addSound(new PopSound($s));\r\n        }\r\n        /*if ($this->getSpawn($levelname)) {\r\n            if ($this->getServer()->isLevelLoaded($levelname) == true && !$level == null) {\r\n                $event->setRespawnPosition(new Position($X, $Y, $Z, $level));\r\n                $s->getLevel()->addSound(new PopSound($s));\r\n            } elseif ($level == null) {\r\n                $s->sendMessage($prefix . MsgMgr::getMsg(\"world-not-found\"));\r\n                $s->teleport($this->getHub());\r\n                $s->kick(MsgMgr::getMsg(\"no-spawn-found-kick\"));\r\n            } elseif (!$this->getServer()->isLevelLoaded($levelname)) {\r\n                $this->getServer()->loadLevel($levelname);\r\n                $event->setRespawnPosition(new Position($X, $Y, $Z, $level));\r\n                $s->getLevel()->addSound(new PopSound($s));\r\n            }\r\n        }*/\r\n    }\r\n\r\n    /*public function isTpToHubOnRepawnEnabled(): bool\r\n    {\r\n        $use = $this->getCfg()->get(\"teleport-to-hub-on-respawn\");\r\n        if ($use == \"true\") {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }*/\r\n\r\n    /**\r\n     * @param $x\r\n     * @param $y\r\n     * @param $z\r\n     * @param Level $level\r\n     * @return bool\r\n     */\r\n    public function setHub($x, $y , $z , Level $level): bool\r\n    {\r\n        $config = new Config($this->getDataFolder() . \"config.yml\", Config::YAML);\r\n        $hub = new Config($this->getDataFolder() . \"theHub.yml\", Config::YAML);\r\n        $hubcoords = [\"hub\", \"X\" => $x, \"Y\" => $y, \"Z\" => $z, \"level\" => $level->getName()];\r\n        $hub->set(\"hub\", $hubcoords);\r\n        $hub->save();\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @return false|Position\r\n     */\r\n    public function getHub()\r\n    {\r\n        $prefix = \"§f[§7the§eSpawn§f] §8»§r \";\r\n        $hub = new Config($this->getDataFolder() . \"theHub.yml\", Config::YAML);\r\n        if ($hub->exists(\"hub\")) {\r\n            $X = $hub->get(\"hub\")[\"X\"];\r\n            $Y = $hub->get(\"hub\")[\"Y\"];\r\n            $Z = $hub->get(\"hub\")[\"Z\"];\r\n            $levelname = $hub->get(\"hub\")[\"level\"];\r\n            $level = $this->getServer()->getLevelByName($levelname);\r\n            $coords = new Position($X, $Y, $Z, $level);\r\n            return $coords;\r\n        } else {\r\n            $this->getLogger()->error(\"!!Please set a Hub!!\");\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param Level $level\r\n     * @return false|Position\r\n     * @return false|Position\r\n     */\r\n    public function getSpawn(Level $level)\r\n    {\r\n        $spawn = new Config($this->getDataFolder() . \"theSpawns.yml\", Config::YAML);\r\n        $spawn->get($level->getName());\r\n        if ($spawn->exists($level->getName())) {\r\n            $X = $spawn->get($level->getName())[\"X\"];\r\n            $Y = $spawn->get($level->getName())[\"Y\"];\r\n            $Z = $spawn->get($level->getName())[\"Z\"];\r\n            return new Position($X, $Y, $Z, $level);\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param Player $s\r\n     * @param Level $level\r\n     * @return bool\r\n     */\r\n    public function setSpawn(Player $s, Level $level): bool\r\n    {\r\n        $spawn = new Config($this->getDataFolder() . \"theSpawns.yml\", Config::YAML);\r\n        $x = $s->getX();\r\n        $y = $s->getY();\r\n        $z = $s->getZ();\r\n        $coords = [\"X\" => $x, \"Y\" => $y, \"Z\" => $z, \"level\" => $level->getName()];\r\n        $spawn->set($level->getName(), $coords);\r\n        $spawn->save();\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @return false|mixed\r\n     */\r\n    public function getHubLevel(): string\r\n    {\r\n        $hub = new Config($this->getDataFolder() . \"theHub.yml\", Config::YAML);\r\n        if ($hub->exists(\"hub\")) {\r\n            $levelname = $hub->get(\"hub\")[\"level\"];\r\n            return $levelname;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @return bool\r\n     */\r\n    public function removeHub(): bool\r\n    {\r\n        $hub = new Config($this->getDataFolder() . \"theHub.yml\", Config::YAML);\r\n        if ($hub->exists(\"hub\")) {\r\n            $hub->remove(\"hub\");\r\n            return $hub->save();\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param Level $level\r\n     * @return bool\r\n     */\r\n    public function removeSpawn(Level $level): bool\r\n    {\r\n        $spawn = new Config($this->getDataFolder() . \"theSpawns.yml\", Config::YAML);\r\n        if ($spawn->exists($level->getName())) {\r\n            $spawn->remove($level->getName());\r\n            return $spawn->save();\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @return bool\r\n     */\r\n    public function getUseHubServer(): bool\r\n    {\r\n        $config = new Config($this->getDataFolder() . \"config.yml\", Config::YAML);\r\n        if ($config->get(\"use-hub-server\") === \"true\") {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @return bool\r\n     */\r\n    public function getUseWaterdogTransfer(): bool\r\n    {\r\n        $config = new Config($this->getDataFolder() . \"config.yml\", Config::YAML);\r\n        if ($config->get(\"waterdog-hub-teleport\") === \"true\") {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param Player $s\r\n     * @return bool\r\n     */\r\n    public function teleportToHubServer(Player $s): bool\r\n    {\r\n        $config = new Config($this->getDataFolder() . \"config.yml\", Config::YAML);\r\n        if ($this->getUseHubServer() == true) {\r\n            return $s->transfer($config->get(\"hub-server-ip\"), $config->get(\"hub-server-port\"));\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /*/**\r\n     * @param Player $player\r\n     * @param string $server\r\n     */\r\n    /*public function teleportToHubServerWithWaterdog(Player $player, string $server) //Thanks to FlxiBoy\r\n    {\r\n        API::transfer($player, $server);\r\n        /*$pk = new ScriptCustomEventPacket();\r\n        $pk->eventName = \"bungeecord:main\";\r\n        $pk->eventData = Binary::writeShort(strlen(\"Connect\")).\"Connect\".Binary::writeShort(strlen($server)).$server;\r\n        $player->sendDataPacket($pk);\r\n    }*/\r\n\r\n    /**\r\n     * @return bool\r\n     */\r\n    public function useAliases(): bool\r\n    {\r\n        if ($this->config->get(\"use-aliases\") == \"true\") {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @param string $alias\r\n     * @return string\r\n     */\r\n    public function getWorldOfAlias(string $alias): string\r\n    {\r\n        return $this->aliasCfg->get($alias);\r\n    }\r\n\r\n    /**\r\n     * @param string $levelName\r\n     * @return bool\r\n     */\r\n    public function existsLevel(string $levelName): bool\r\n    {\r\n        if ($this->getServer()->isLevelGenerated($levelName)) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param string $alias\r\n     * @return bool\r\n     */\r\n    public function existsAlias(string $alias): bool\r\n    {\r\n        if ($this->aliasCfg->exists($alias)) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param string $alias\r\n     * @return bool\r\n     */\r\n    public function rmAlias(string $alias): bool\r\n    {\r\n        if ($this->existsAlias($alias) == true) {\r\n            $cmd = $this->getServer()->getCommandMap()->getCommand($alias);\r\n            $this->getServer()->getCommandMap()->unregister($cmd);\r\n            $this->aliasCfg->remove($alias);\r\n            $this->aliasCfg->save();\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param string $alias\r\n     * @param string $levelName\r\n     * @return bool\r\n     */\r\n    public function addAlias(string $alias, string $levelName): bool\r\n    {\r\n        $level = $this->getServer()->getLevelByName($levelName);\r\n        if ($this->getSpawn($level) == false) {\r\n            return false;\r\n        }\r\n        $this->aliasCfg->set($alias, $levelName);\r\n        $this->aliasCfg->save();\r\n        $this->getServer()->getCommandMap()->register($alias, new Aliases($this, $alias, str_replace([\"{alias}\"], [$alias], str_replace([\"{world}\"], [$levelName], MsgMgr::getMsg(\"alias-command-description\")))));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    public function reactivateAliases()\r\n    {\r\n        foreach ($this->aliasCfg->getAll() as $cmd => $worldName) {\r\n            $this->getServer()->getCommandMap()->register($cmd, new Aliases($this, $cmd, str_replace([\"{alias}\"], [$cmd], str_replace([\"{world}\"], [$worldName], MsgMgr::getMsg(\"alias-command-description\")))));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param string $playerName\r\n     * @return Config\r\n     */\r\n    public function getHomeCfg(string $playerName): Config\r\n    {\r\n        return new Config($this->getDataFolder() . \"homes/\" . $playerName . \".yml\", Config::YAML);\r\n    }\r\n\r\n    /**\r\n     * @param string $homeName\r\n     * @param Player $player\r\n     * @return bool\r\n     */\r\n    public function existsHome(string $homeName, Player $player): bool\r\n    {\r\n        if (file_exists($this->getDataFolder() . \"homes/\" . $player->getName() . \".yml\")) {\r\n            if ($this->getHomeCfg($player->getName())->exists($homeName)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @param Player $player\r\n     * @param string $homeName\r\n     * @param $x\r\n     * @param $y\r\n     * @param $z\r\n     * @param Level $level\r\n     * @return bool\r\n     */\r\n    public function setHome(Player $player, string $homeName, $x, $y, $z, Level $level): bool\r\n    {\r\n        if ($this->existsHome($homeName, $player) == false) {\r\n            $home = $this->getHomeCfg($player->getName());\r\n            $setThis = [\"X\" => $x, \"Y\" => $y, \"Z\" => $z, \"level\" => $level->getName(), \"homeName\" => $homeName];\r\n            $home->set($homeName, $setThis);\r\n            $home->save();\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @param Player $player\r\n     * @param string $homeName\r\n     * @return bool\r\n     */\r\n    public function rmHome(Player $player, string $homeName): bool\r\n    {\r\n        if ($this->existsHome($homeName, $player) == true) {\r\n            $home = $this->getHomeCfg($player->getName());\r\n            $home->remove($homeName);\r\n            $home->save();\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @param Player $player\r\n     * @param string $homeName\r\n     * @return false|Position\r\n     */\r\n    public function getHomePos(Player $player, string $homeName)\r\n    {\r\n        if ($this->existsHome($homeName, $player) == true) {\r\n            $home = $this->getHomeCfg($player->getName());\r\n            $x = $home->get($homeName)[\"X\"];\r\n            $y = $home->get($homeName)[\"Y\"];\r\n            $z = $home->get($homeName)[\"Z\"];\r\n            $levelName = $home->get($homeName)[\"level\"];\r\n            if ($this->getServer()->isLevelGenerated($levelName)) {\r\n                if ($this->getServer()->isLevelLoaded($levelName)) {\r\n                    $level = $this->getServer()->getLevelByName($levelName);\r\n                    return new Position($x, $y, $z, $level);\r\n                } else {\r\n                    $this->getServer()->loadLevel($levelName);\r\n                    $level = $this->getServer()->getLevelByName($levelName);\r\n                    return new Position($x, $y, $z, $level);\r\n                }\r\n            } else {\r\n                return \"LevelError\";\r\n            }\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param Player $player\r\n     * @param string $homeName\r\n     * @return bool|string\r\n     */\r\n    public function teleportToHome(Player $player, string $homeName)\r\n    {\r\n        if ($this->existsHome($homeName, $player) == true) {\r\n            if ($this->getHomePos($player, $homeName) == false) {\r\n                return false;\r\n            } elseif ($this->getHomePos($player, $homeName) == \"LevelError\") {\r\n                return \"LevelError\";\r\n            } else {\r\n                $pos = $this->getHomePos($player, $homeName);\r\n                $player->teleport($pos);\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @param Player $player\r\n     * @return string|null\r\n     */\r\n    public function listHomes(Player $player)\r\n    {\r\n        $homes = null;\r\n        if (file_exists($this->getDataFolder() . \"homes/\" . $player->getName() . \".yml\")) {\r\n            $home = $this->getHomeCfg($player->getName());\r\n            $all = $home->getAll();\r\n            $getRight = $all;\r\n            foreach ($getRight as $homex => $homez) {\r\n                $right = [$homez[\"homeName\"] . \", \"];\r\n                $homes .= implode(\", \", $right);\r\n            }\r\n            return $homes;\r\n        }\r\n        return $homes;\r\n    }\r\n\r\n    /**\r\n     * @param Player $player\r\n     * @param string $homeName\r\n     * @return HomeInfo\r\n     */\r\n    public function getHomeInfo(Player $player, string $homeName)\r\n    {\r\n        return new HomeInfo($player, $homeName);\r\n    }\r\n\r\n    /**\r\n     * @return bool\r\n     */\r\n    public function useHomes(): bool\r\n    {\r\n        if ($this->getCfg()->get(\"use-homes\") == \"true\" || $this->getCfg()->get(\"use-homes\") == \"on\") {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param Player $player\r\n     * @param string $server\r\n     */\r\n    public function transferToProxyServer(Player $player, string $server)\r\n    {\r\n        $pk = new ScriptCustomEventPacket();\r\n        $pk->eventName = \"bungeecord:main\";\r\n        $pk->eventData = Binary::writeShort(strlen(\"Connect\")) . \"Connect\" . Binary::writeShort(strlen($server)) . $server;\r\n        $player->sendDataPacket($pk);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/supercrafter333/theSpawn/theSpawn.php b/src/supercrafter333/theSpawn/theSpawn.php
--- a/src/supercrafter333/theSpawn/theSpawn.php	
+++ b/src/supercrafter333/theSpawn/theSpawn.php	
@@ -459,6 +459,18 @@
         }
     }
 
+    public function levelCheck(string $levelName): Level
+    {
+        if ($this->getServer()->isLevelLoaded($levelName)) {
+            $level = $this->getServer()->getLevelByName($levelName);
+            return $level;
+        } else {
+            $this->getServer()->loadLevel($levelName);
+            $level = $this->getServer()->getLevelByName($levelName);
+            return $level;
+        }
+    }
+
     /**
      * @param string $playerName
      * @return Config
Index: src/supercrafter333/theSpawn/Commands/SetaliasCommand.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace supercrafter333\\theSpawn\\Commands;\r\n\r\nuse pocketmine\\command\\Command;\r\nuse pocketmine\\command\\CommandSender;\r\nuse pocketmine\\command\\PluginIdentifiableCommand;\r\nuse pocketmine\\level\\sound\\DoorBumpSound;\r\nuse pocketmine\\Player;\r\nuse pocketmine\\plugin\\Plugin;\r\nuse supercrafter333\\theSpawn\\MsgMgr;\r\nuse supercrafter333\\theSpawn\\theSpawn;\r\n\r\n/**\r\n * Class SetaliasCommand\r\n * @package supercrafter333\\theSpawn\\Commands\r\n */\r\nclass SetaliasCommand extends Command implements PluginIdentifiableCommand\r\n{\r\n\r\n    /**\r\n     * @var theSpawn\r\n     */\r\n    private $plugin;\r\n\r\n    /**\r\n     * SetaliasCommand constructor.\r\n     * @param string $name\r\n     * @param string $description\r\n     * @param string|null $usageMessage\r\n     * @param array $aliases\r\n     */\r\n    public function __construct(string $name, string $description = \"\", string $usageMessage = null, array $aliases = [])\r\n    {\r\n        $this->plugin = theSpawn::getInstance();\r\n        parent::__construct(\"setalias\", \"Register a new alias!\", \"§4Use: §r/setalias <alias> <worldname>\", [\"addalias\"]);\r\n    }\r\n\r\n    /**\r\n     * @param CommandSender $s\r\n     * @param string $commandLabel\r\n     * @param array $args\r\n     * @return bool\r\n     */\r\n    public function execute(CommandSender $s, string $commandLabel, array $args): bool\r\n    {\r\n        $prefix = theSpawn::PREFIX;\r\n        $pl = theSpawn::getInstance();\r\n        if ($s instanceof Player) {\r\n            if (count($args) < 2) {\r\n                $s->sendMessage($this->usageMessage);\r\n                return true;\r\n            }\r\n            if (!$s->hasPermission(\"theSpawn.setalias.cmd\")) {\r\n                $s->sendMessage($prefix . MsgMgr::getNoPermMsg());\r\n                return true;\r\n            }\r\n            if (!is_string($args[0]) || !is_string($args[1])) {\r\n                $s->sendMessage($this->usageMessage);\r\n                return true;\r\n            }\r\n            if ($pl->existsLevel($args[1]) == false) {\r\n                $s->sendMessage($prefix . MsgMgr::getMsg(\"world-not-found\"));\r\n                return true;\r\n            }\r\n            if ($pl->aliasCfg->get(\"use-aliases\") == \"false\") {\r\n                $s->sendMessage($prefix . MsgMgr::getMsg(\"aliases-deactivated\"));\r\n                return true;\r\n            }\r\n            $pl->addAlias($args[0], $args[1]);\r\n            $s->sendMessage($prefix . str_replace([\"{alias}\"], [$args[0]], str_replace([\"{world}\"], [$args[1]], MsgMgr::getMsg(\"alias-set\"))));\r\n            $s->getLevel()->addSound(new DoorBumpSound($s));\r\n            return true;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @return Plugin\r\n     */\r\n    public function getPlugin(): Plugin\r\n    {\r\n        return $this->plugin;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/supercrafter333/theSpawn/Commands/SetaliasCommand.php b/src/supercrafter333/theSpawn/Commands/SetaliasCommand.php
--- a/src/supercrafter333/theSpawn/Commands/SetaliasCommand.php	
+++ b/src/supercrafter333/theSpawn/Commands/SetaliasCommand.php	
@@ -67,6 +67,9 @@
                 $s->sendMessage($prefix . MsgMgr::getMsg("aliases-deactivated"));
                 return true;
             }
+            if ($pl->getSpawn($pl->levelCheck($args[1])) == false) {
+                $s->sendMessage($prefix . MsgMgr::getMsg());
+            }
             $pl->addAlias($args[0], $args[1]);
             $s->sendMessage($prefix . str_replace(["{alias}"], [$args[0]], str_replace(["{world}"], [$args[1]], MsgMgr::getMsg("alias-set"))));
             $s->getLevel()->addSound(new DoorBumpSound($s));
Index: resources/messages.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#here you can select the messages of theSpawn\r\n#setup and tp messages\r\n#uses: {world}\r\nspawn-tp: \"§aYou're successfully teleported to the spawn of this world! §7[§b{world}§7]\"\r\nhub-tp: \"§aYou're successfully teleported to the spawn the hub! §7[§b{world}§7]\"\r\nspawn-set: \"§aYou've successfully §7set §athe spawn for this world! §7[§b{world}§7]\"\r\nspawn-changed: \"§aYou've successfully §7changed §athe spawn for this world! §7[§b{world}§7]\"\r\nhub-set: \"§aYou've successfully §7set§a the hub to world §b{world}§a!\"\r\nhub-changed: \"§aYou've successfully §7changed§a the hub to world §b{world}§a!\"\r\n#\r\n#remove messages\r\n#uses: none\r\nspawn-removed: \"§aYou've successfully removed the spawn of this world!\"\r\nhub-removed: \"§aYou've successfully removed the hub spawn.\"\r\n#\r\n#alias messages\r\n#uses: {alias} {world}\r\nalias-teleport: \"§aYou was teleported to the alias §7{alias}§a! §7§b{world}§7]\"\r\nalias-set: \"§aYou've successfully set the alias §b{alias}§a for world §b{world}§a!\"\r\nalias-command-description: \"§r§aAlias for world §b{world}§a!\"\r\n#uses: {alias}\r\nalias-removed: \"§aYou've successfully removed the alias §b{alias}§a!\"\r\n#\r\n#home messages\r\n#uses: {home}\r\nhome-teleport: \"§aYou was successfully teleported to your home §b{home}§a!\"\r\nhome-not-exists: \"§cYou home §b{home}§c does not exists!\"\r\nhome-set: \"§aYou've successfully set the home §b{home}§a!\"\r\nhome-deleted: \"§aYou've successfully deleted your home §b{home}§a!\"\r\nhome-already-exists: \"§cYour home §b{home}§c already exists!\"\r\n#uses: {homelist}\r\nhomelist: \"§eYour homes: §7{homelist}\"\r\n#\r\n#errors\r\n#uses: none\r\nno-spawn-set: \"§4ERROR --> §cNo spawn was set for this world!\"\r\nno-hub-set: \"§4ERROR --> §cNo hub set for this server!\"\r\nalias-not-found: \"§cThis alias doesn't exists!\"\r\nhub-server-is-enabled: \"§7'use-hub-server' §cis §7true §cin config, you can't set a hubspawn if this is on true!\"\r\nsomething-went-wrong: \"§4Something went wrong!\"\r\nno-perms: \"§cYou don't have permissions to use this!\"\r\nworld-not-found: \"§cWorld was not found!\"\r\nworld-not-found-hub: \"§cHub world not found!\"\r\nno-spawn-set-in-this-world: \"§cThere's no spawn set for this world!\"\r\naliases-deactivated: \"§cAliases are deactivated on this server! Aliases can activate in the config.yml of theSpawn!\"\r\nonly-In-Game: \"Only In-Game!\"\r\nfalse-config-setting: \"§4FATAL ERROR --> §cFalse setting in config, 'use-hub-server' <true|false> but their don't is true or false!\"\r\nno-spawn-found-kick: \"§4No spawn found for your world! You was kicked for debug!\"\r\nno-homes-set: \"§cYou do not have set any homes!\"\r\n\r\n\r\n\r\n#don't change this\r\nversion: \"1.1.0\"\r\n\r\n\r\n############################\r\n##########theSpawn##########\r\n############################\r\n#Licensed under Apache License 2.0! Plugin by supercrafter333 inspirated by MSpawns from EvolSoft!
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/resources/messages.yml b/resources/messages.yml
--- a/resources/messages.yml	
+++ b/resources/messages.yml	
@@ -47,11 +47,13 @@
 false-config-setting: "§4FATAL ERROR --> §cFalse setting in config, 'use-hub-server' <true|false> but their don't is true or false!"
 no-spawn-found-kick: "§4No spawn found for your world! You was kicked for debug!"
 no-homes-set: "§cYou do not have set any homes!"
+#uses: {world}
+no-spawn-set-for-world: "§cThere's no spawn set for world {world}"
 
 
 
 #don't change this
-version: "1.1.0"
+version: "1.1.1-dev"
 
 
 ############################
